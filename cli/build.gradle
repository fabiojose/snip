plugins {
    id 'io.quarkus'
    id 'org.jreleaser' version '1.2.0'
}

dependencies {
    implementation project(':core')
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-picocli'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'commons-io:commons-io:2.11.0'

    implementation 'org.json:json:20220320'

    testImplementation 'io.quarkus:quarkus-junit5'

    annotationProcessor enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    annotationProcessor 'info.picocli:picocli-codegen'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
}

description 'Snip CLI'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

jar {
  archiveFileName = 'snip.jar'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jreleaser {
    gitRootSearch = true
    project {
        name = 'snip'
        website = 'https://github.com/fabiojose/snip'
        authors = ['fabiojose@gmail.com']
        license = 'Apache-2.0'
        extraProperties.put('inceptionYear', '2021')
        description = 'The easiest way to scaffold projects'
    }

    release {
        github {
            username = 'fabiojose'
            owner = 'fabiojose'
            overwrite = true
            changelog {
              formatted = 'ALWAYS'
              preset = 'conventional-commits'
              format = '- {{commitShortHash}} {{commitTitle}}'
            }
        }
    }

    assemble {
      archive {
        snip {
          active = 'ALWAYS'
          distributionType = 'JAVA_BINARY'

          formats = [
            org.jreleaser.model.Archive$Format.TGZ
          ]

          fileSet {
            input = '.'
            includes = ['LICENSE', 'README.md']
          }

          fileSet {
            input = 'build'
            includes = ['*.jar']
            output = 'lib'
          }
        }
      }
    }

    distributions {
        snip {
           artifact {
               path = 'build/jreleaser/assemble/snip/archive/{{distributionName}}-{{projectVersion}}.tgz'
           }
        }
    }
}
